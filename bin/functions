#!/bin/bash
#
# Remember to export functions at the end,
# if you wish them to be used outside of this script.

lint() {
	cpplint --filter=-build/include_order,-readability/utf8,-whitespace/indent,-whitespace/line_length,-runtime/references $*
}

#
# Condtionally echo
#
echo_verbose()
{
    if [ "$WORK_VERBOSE" == "" ]; then
	    return
    fi

    if [ "$WORK_VERBOSE" -ge "$1" ]; then
        shift
        echo -e "$*"
    fi
}

#
# Echo the root folder of the current repo.
#
function current_repo()
{
    cur=`pwd`
    result=$cur
    while [ ! -d .git ]; do
        cd ..
        result=`pwd`
        if [ `pwd` == "/" ]; then
            result=""
            break
        fi
    done
    echo $result
    cd $cur
}

statuscs()
{
    cmd='status.impl.exe $*'
    eval $cmd
}

#
# Goto a repository.
# 
# TODO(cjs) move to $WORK_ROOT/src
[ -e $WORK_ROOT/repos/go-cpp ] && source $WORK_ROOT/repos/go-cpp/fun.sh

#
# Goto root of current repo
#
gor() {
    cd `current_repo`
}

#
# Git Add, Commit and Push
#
gacp() {
    echo "gacp"
    if [ -z "$*" ]; then
        # TODO: use vi to make a message
        echo "Need commit message"
        exit 1
    fi
    git add -A
    git commit -m "$*"
    git push
}

#
# Show the end of the current Unity3d log
#
unity_log() {
    tail $* ~/AppData/Local/Unity/Editor/Editor.log
}

#
# Should probably be an alias.
#
f() {
    find . -name $*
}

#
# Show help
#
help() {
    start $WORK_DIR/doc/Readme.md
}

first() {
    cd `find . $2 -name $1 -print -quit`
}

# Export functions
export gacp f help unity_log go statuscs first


