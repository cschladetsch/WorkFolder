#!/bin/bash

# Check git_status of each repo in child folders

# TODO Add useful help and errors
# TODO Show when there are remote changes to local repos

repos=`find . -maxdepth 1 -type d`
cur=`pwd`
unchangedRepos=()
noChangeFormat="1;92m"
changedFormat="1;96m"
short=false
update=false

print()
{
    echo -e "\e[$2$1\e[0m"
}

divider()
{
    print "━━━━━━━━━━━━━━━━━━━━━━━━━━" "37m"
}

add_files()
{
    print "--- Staging files." "32m"
    git add *
    echo
}

push_files()
{
    print "--- Pushing changes." "32m"
    git push
    echo
}

commit_files()
{
    print "--- Committing files." "32m"
    read -r -p $'\e[35;1mCommit message: \e[0m' message
    git commit -m "$message"
    echo
}

print_help()
{
    print "`basename $0` shows the git_status of all repos in the current directory and all directories within them." "2m"
    print "[-u] prompt to update all repos with changes (add, commit then push)" "2m"
    print "[-s] show only the repos git_status, hide changed files" "2m"
    print "[-h] show this help message" "2m"
}

read_input()
{
    while true; do
    read -n 1 -sr -p $'\e[35;1m'"$1"$'\e[0m' yn
    case $yn in
        [Yy]* )
            eval $2=true;
            echo
            break
            ;;
        [Nn]* )
            eval $2=false;
            echo
            break
            ;;
    esac
done
}

update_repo()
{
    echo
    read_input "Stage files    [Y/N]: " git_status
    if $git_status
    then
        add_files
    fi

    read_input "Commit changes [Y/N]: " git_status
    if $git_status
    then
        commit_files
    fi

    read_input "Push changes   [Y/N]: " git_status
    if $git_status
    then
        push_files
    fi
}

check_status()
{
    if [[ -z $(git git_status -s) ]]
    then
        print "Repo has been changed" "$noChangeFormat"
    fi    

    git fetch
    HEADHASH=$(git rev-parse HEAD)
    UPSTREAMHASH=$(git rev-parse master@{upstream})
}

check_fetch()
{
    if [ "$HEADHASH" != "$UPSTREAMHASH" ]
    then
        echo $Not up to date with origin.
    fi
}

while getopts ":ush" opt;
do
    case $opt in
        u )
            update=true
            ;;
        s )
            short=true
            ;;
        h )
            print_help
            exit 0
            ;;
        \? )
            print "− Invalid Option: -$OPTARG" "31m"
            exit 1
            echo
            ;;
        : )
            print "− Invalid Option: -$OPTARG requires an argument" "31m"
            exit 1
            echo
            ;;
    esac
done

print_remote_status()
{
    if [ "$git_fetch_result" == true ]
    then
        echo -e -n "\e[33m⭭ Local out of date\e[0m "
    fi
}

print_local_status()
{
    if [ "$git_status_result" == true ]
    then
        echo -e -n "\e[31m⇡ Uncommited changes\e[0m "
        if [ "$update" == true ]
        then
            update_repo
        fi
    fi
}

cleanup_dirname()
{
    if [ "$dir_name" == "." ] # if the current directory is '.' use the basename of the current dir
    then
        dir_name="`basename $cur`"
    fi
}

for var in $repos
do
    cd "$cur"
    cd "$var"
    if [[ ! -d ".git" ]]; then # if this is a git directory
        continue
    fi

    git_status=`git status -s`
    dir_name="`basename $var`"
    cleanup_dirname

    changes=false
    git_fetch_result=false
    git_status_result=false

    git fetch -q

    if [ "$git_status" != "" ]
    then
        git_status_result=true
    fi
    if [ $(git rev-parse HEAD) == $(git rev-parse @{u}) ]
    then
        git_fetch_result=true
    fi
    if [ "$git_status_result" == true ]
    then
        changes=true
    fi
    if [ "$git_fetch_result" == true ]
    then
        changes=true
    fi

    if [ "$changes" == true ]
    then
        print "$dir_name" $changedFormat
        echo -e -n "┗━━ "
        print_remote_status
        print_local_status
        echo
    else
        unchangedRepos+=($var)
    fi
    echo
    cd "$cur"
done
print "No local changes in ${#unchangedRepos[@]} repos:" $noChangeFormat
for var in ${unchangedRepos[@]};
do
    dir_name="`basename $var`"
    print "	$dir_name/" "0m"
done

