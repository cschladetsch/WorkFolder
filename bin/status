#!/bin/bash

# Check status of each repo in child folders

# TODO Add useful help and errors
# TODO Show when there are remote changes to local repos

repos=`find . -maxdepth 1 -type d`
cur=`pwd`
unchangedRepos=()
noChangeFormat="1;92m"
changedFormat="1;96m"
short=false
update=false

print()
{
    echo -e "\e[$2$1\e[0m"
}

divider()
{
    print "━━━━━━━━━━━━━━━━━━━━━━━━━━" "37m"
}

add_files()
{
    print "--- Staging files." "32m"
    git add *
    echo
}

push_files()
{
    print "--- Pushing changes." "32m"
    git push
    echo
}

commit_files()
{
    print "--- Committing files." "32m"
    read -r -p $'\e[35;1mCommit message: \e[0m' message
    git commit -m "$message"
    echo
}

print_help()
{
    print "`basename $0` shows the status of all repos in the current directory and all directories within them." "2m"
    print "[-u] prompt to update all repos with changes (add, commit then push)" "2m"
    print "[-s] show only the repos status, hide changed files" "2m"
    print "[-h] show this help message" "2m"
}

read_input()
{
    while true; do
    read -n 1 -sr -p $'\e[35;1m'"$1"$'\e[0m' yn
    case $yn in
        [Yy]* )
            eval $2=true;
            echo
            break
            ;;
        [Nn]* )
            eval $2=false;
            echo
            break
            ;;
    esac
done
}

update_repo()
{
    echo
    read_input "Stage files    [Y/N]: " result
    if $result
    then
        add_files
    fi

    read_input "Commit changes [Y/N]: " result
    if $result
    then
        commit_files
    fi

    read_input "Push changes   [Y/N]: " result
    if $result
    then
        push_files
    fi
}

check_status()
{
    if [[ -z $(git status -s) ]]
    then
        echo "Repo has been changed" "$noChangeFormat"
    fi            
}

while getopts ":ush" opt;
do
    case $opt in
        u )
            update=true
            ;;
        s )
            short=true
            ;;
        h )
            print_help
            exit 0
            ;;
        \? )
            print "− Invalid Option: -$OPTARG" "31m"
            exit 1
            echo
            ;;
        : )
            print "− Invalid Option: -$OPTARG requires an argument" "31m"
            exit 1
            echo
            ;;
    esac
done

for var in $repos
do
    cd "$var"
    if [ -d .git ]
    then
        result=`git status -s`
        name="`basename $var`"
        if [ "$name" == "." ]
        then
            name="`basename $cur`"
        fi
        if [ "$result" != "" ]
        then
            print "• $name changed." $changedFormat
            if [ "$short" == true ]
            then
                cd $cur
                continue
            else
                git status -sb
              if [ "$update" == true ]
                then
                    update_repo
               fi
               fi
            echo
        else
            unchangedRepos+=($var)
        fi
    fi
    cd $cur
done

print "No local changes in ${#unchangedRepos[@]} repos:" $noChangeFormat
for var in ${unchangedRepos[@]};
do
    name="`basename $var`"
#        if [ $name == "." ]
#        then
#            name="./`basename $cur`"
#        fi
    print "	$name/" "0m"
done

