#!/bin/bash
# Common functions
#
# Remember to export functions at the end,
# if you wish them to be used outside of this script.

export WORK_VERBOSE=1

#
# Condtionally echo
#
echo_verbose()
{
    if [ $WORK_VERBOSE -ge "$1" ]; then
        shift
        echo -e "$*"
    fi
}

#
# Echo the root folder of the current repo.
#
function current_repo()
{
    cur=`pwd`
    result=$cur
    while [ ! -d .git ]; do
        cd ..
        result=`pwd`
        if [ `pwd` == "/" ]; then
            result=""
            break
        fi
    done
    echo $result
    cd $cur
}

#
# Go to a repository.
# 
# If no arguments are given, a list of repos
# is shown to select from. God help you if you
# have more than 9 repos.
#
# If an argument is given, it is interpreted as
# a repo number.
#
# The current directory is saved and restored as
# you switch between repos in `current_repo`.current.
#
function go_impl()
{
    cur=`pwd`
    repos_path="/w/repos/"
    repos=`find $repos_path -maxdepth 1 -type d`
    array=()
    print=1
    if [ -n "$1" ]; then
        print=0
    fi

    cur=`current_repo`
    if [ -n $cur ]; then
        echo_verbose 4 "Saving current `pwd` to $cur/.current"
        echo `pwd` > $cur/.current
    fi

    echo_verbose 3 "Go to repo:"
    count=0
    for var in $repos
    do
        cd "$var"
        if [ -d .git ]
        then
            array+=($var)
            name="`basename $var`"
            root=`current_repo`
            if [ -e $root/.current ]; then
                current="`cat $root/.current`"
            fi
            if [ $print -ge 1 ]; then
                if [ $var == $cur ]
                then
                    echo -e "\e[92m$count $name\e[0m $current"
                else
                    echo -e "$count $name $current"
                fi
            fi
            ((count++))
        fi
    done

    if [ $print -eq 1 ]; then
        read -rsn1 input
    else
        input=$1
    fi

    dest=${array[input]}
    echo_verbose 2 "â†’ $dest"

    if [ -e $dest/.current ]; then
        echo_verbose 2 "Restoring"
        cd `cat $dest/.current`
    else
        cd "$dest"
    fi
}

go()
{
    #echo `go_impl $*` | column -t -s' '
    go_impl $*
}


gor()
{
    cd `current_root`
}

#
# Git Add, Commit and Push
#
gacp()
{
    if [ "$*" == "" ]; then
        echo "Need commit message"
        exit 1
    fi
    git add *
    git commit -m "$*"
    git push
}

#
# Show the end of the current Unity3d log
#
unity_log()
{
    tail $* ~/AppData/Local/Unity/Editor/Editor.log
}

#
# An alias find.
#
# Should probably be an alias.
#
f()
{
    find . -name $*
}

#
# Show help
#
help()
{
    start $WORK_DIR/doc/Readme.md
}

# Export functions
export gacp f help unity_log go

echo_verbose 2 "...functions"

